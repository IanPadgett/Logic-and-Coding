public class ArrayList{
    private int[] data;
    private int last; //index of the last element
    
    //set initial capacity to 10
    public ArrayList(){
        data = new int[10];
        last = -1;  //fix
    }

    //returns the number of elements in the list (not the capacity)
    public int size(){
        return last+1;
    }



    //Precondition: 0 <= index <= last
    //return the element at that index
    public int get(int index){
        while(index<last && index>0){
            return data[index];
        }
    }



    //Precondition:  0 <= index <= last
    //sets the value at index to the newValue
    public void set(int index, int newValue){
        while(index<last && index>0){
            int i=index;
            int j=newValue;
            j=i;
            return j;
        }
    }



    //Precondition:  0 <= index <= last
    //value at index is removed from the list â€“ all elements shift down
    //returns removed value
    public int remove(int index){
        int removedVal = data[index];
        for(int i = index; i<=data.length-1;i++){  
          data[index-1]=data[index];
        }
        last=last-1;
        return temp;
    }
    //Precondition:  0 <= index <= last+1
    //Inserts newValue at index.  Everything from index on gets shifted up
    public void add(int index, int newValue){
        if(last==data.length-1){
           resize();
           int temp= data[index];
        }
        else{
            data[index]=newValue;
            for(int i=index; i=data.length-1;i++){
                data[index+1]=data[index];//original value gets shifted 1 position up
            }
            last=last+1;
        }
    }
    
    //adds newValue to the end of the list
    public void add(int newValue){
        add(last+1,newValue);
    }


    //private method means "not accessible outside the class"
    //This is intentional.
    //This method should double the capacity
    private void resize(){
        int []temp= newTemp[2*data.length]
        for(int i=0; i
    }


    //returns, for example, "[3, 6, 7, 9]"
    //This will be helpful for your debugging
    public String toString(){
        
    }


    //returns true if two lists have exactly the same elements
    //in exactly the same order
    public boolean equals(ArrayList otherList){
        for(int i=0; i<=otherList; i++){
            i=otherList[]
            i++;
            return true;
        }
    }
}
